services:
  backend:
    container_name: drop-auth
    restart: always
    build: .
    ports:
      - 8080:8080
    networks:
      - drop-auth
      - drop-shared
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_started
  migrate:
    image: migrate/migrate
    networks:
      - drop-auth
    volumes:
      - ./internal/db/migrations:/migrations
    command: ["-path", "/migrations", "-database",  "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable", "up"]
    depends_on: 
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:16.4-alpine
    container_name: postgres-auth
    restart: always
    ports:
      - 5431:5432
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - drop-auth
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
  redis:
    image: redis:alpine
    container_name: redis-auth
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - drop-auth
    ports:
      - 6378:6379
    volumes:
      - redis-data:/var/lib/redis/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: /bin/sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
volumes:
  postgres-data:
  redis-data:
networks:
  drop-auth:
    driver: bridge
  drop-shared:
    external: true