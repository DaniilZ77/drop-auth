// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAdmins = `-- name: CountAdmins :one
select count(*)
from "users_admins" ua
join "users" u on u.id = ua.user_id
where u.id = coalesce($1, u.id)
and u.username = coalesce($2, u.username)
and ua.scale = coalesce($3, ua.scale)
and u.is_deleted = false
`

type CountAdminsParams struct {
	UserID     pgtype.UUID
	Username   *string
	AdminScale NullAdminScale
}

func (q *Queries) CountAdmins(ctx context.Context, arg CountAdminsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAdmins, arg.UserID, arg.Username, arg.AdminScale)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
delete from "users_admins" where user_id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAdmin, userID)
	return err
}

const getAdmins = `-- name: GetAdmins :many
select u.id, u.username, ua.scale, ua.created_at
from "users_admins" ua
join "users" u on u.id = ua.user_id
where u.id = coalesce($1, u.id)
and u.username = coalesce($2, u.username)
and ua.scale = coalesce($3, ua.scale)
and u.is_deleted = false
order by ua.created_at
limit $5 offset $4
`

type GetAdminsParams struct {
	UserID     pgtype.UUID
	Username   *string
	AdminScale NullAdminScale
	Offset     int32
	Limit      int32
}

type GetAdminsRow struct {
	ID        uuid.UUID
	Username  string
	Scale     AdminScale
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetAdmins(ctx context.Context, arg GetAdminsParams) ([]GetAdminsRow, error) {
	rows, err := q.db.Query(ctx, getAdmins,
		arg.UserID,
		arg.Username,
		arg.AdminScale,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAdminsRow
	for rows.Next() {
		var i GetAdminsRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Scale,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAdminByID = `-- name: GetUserAdminByID :one
select u.id, ua.scale from "users" u
left join "users_admins" ua on u.id = ua.user_id
where u.id = $1
and "is_deleted" = false
`

type GetUserAdminByIDRow struct {
	ID    uuid.UUID
	Scale NullAdminScale
}

func (q *Queries) GetUserAdminByID(ctx context.Context, id uuid.UUID) (GetUserAdminByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserAdminByID, id)
	var i GetUserAdminByIDRow
	err := row.Scan(&i.ID, &i.Scale)
	return i, err
}

const getUserAdminByUsername = `-- name: GetUserAdminByUsername :one
select u.id, ua.scale from "users" u
left join "users_admins" ua on u.id = ua.user_id
where u.username = $1
and "is_deleted" = false
`

type GetUserAdminByUsernameRow struct {
	ID    uuid.UUID
	Scale NullAdminScale
}

func (q *Queries) GetUserAdminByUsername(ctx context.Context, username string) (GetUserAdminByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserAdminByUsername, username)
	var i GetUserAdminByUsernameRow
	err := row.Scan(&i.ID, &i.Scale)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, username, pseudonym, first_name, last_name, is_deleted, created_at, updated_at from "users"
where id = $1
and "is_deleted" = false
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pseudonym,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveAdmin = `-- name: SaveAdmin :exec
insert into "users_admins" ("user_id", "scale") values ($1, $2)
`

type SaveAdminParams struct {
	UserID uuid.UUID
	Scale  AdminScale
}

func (q *Queries) SaveAdmin(ctx context.Context, arg SaveAdminParams) error {
	_, err := q.db.Exec(ctx, saveAdmin, arg.UserID, arg.Scale)
	return err
}

const saveUser = `-- name: SaveUser :one
insert into "users" ("username", "pseudonym", "first_name", "last_name")
values ($1, $2, $3, $4)
returning "id"
`

type SaveUserParams struct {
	Username  string
	Pseudonym string
	FirstName string
	LastName  string
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, saveUser,
		arg.Username,
		arg.Pseudonym,
		arg.FirstName,
		arg.LastName,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :one
update "users"
set "pseudonym" = coalesce($1, "pseudonym"),
"first_name" = coalesce($2, "first_name"),
"last_name" = coalesce($3, "last_name"),
"updated_at" = now()
where id = $4
and "is_deleted" = false
returning id, username, pseudonym, first_name, last_name, is_deleted, created_at, updated_at
`

type UpdateUserParams struct {
	Pseudonym *string
	FirstName *string
	LastName  *string
	ID        uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Pseudonym,
		arg.FirstName,
		arg.LastName,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Pseudonym,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
