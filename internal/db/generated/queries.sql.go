// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const getUserByExternalID = `-- name: GetUserByExternalID :one
select id, external_id, username, pseudonym, first_name, last_name, is_deleted, created_at, updated_at from "users"
where external_id = $1
and "is_deleted" = false
`

func (q *Queries) GetUserByExternalID(ctx context.Context, externalID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByExternalID, externalID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Username,
		&i.Pseudonym,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, external_id, username, pseudonym, first_name, last_name, is_deleted, created_at, updated_at from "users"
where id = $1
and "is_deleted" = false
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Username,
		&i.Pseudonym,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveUser = `-- name: SaveUser :one
insert into "users" ("username", "external_id", "pseudonym", "first_name", "last_name")
values ($1, $2, $3, $4, $5)
returning "id"
`

type SaveUserParams struct {
	Username   string
	ExternalID int32
	Pseudonym  string
	FirstName  string
	LastName   string
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, saveUser,
		arg.Username,
		arg.ExternalID,
		arg.Pseudonym,
		arg.FirstName,
		arg.LastName,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :one
update "users"
set "pseudonym" = coalesce($1, "pseudonym"),
"first_name" = coalesce($2, "first_name"),
"last_name" = coalesce($3, "last_name")
where id = $4
and "is_deleted" = false
returning id, external_id, username, pseudonym, first_name, last_name, is_deleted, created_at, updated_at
`

type UpdateUserParams struct {
	Pseudonym *string
	FirstName *string
	LastName  *string
	ID        uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Pseudonym,
		arg.FirstName,
		arg.LastName,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Username,
		&i.Pseudonym,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
