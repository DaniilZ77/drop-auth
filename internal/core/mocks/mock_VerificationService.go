// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/MAXXXIMUS-tropical-milkshake/beatflow-auth/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockVerificationService is an autogenerated mock type for the VerificationService type
type MockVerificationService struct {
	mock.Mock
}

type MockVerificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerificationService) EXPECT() *MockVerificationService_Expecter {
	return &MockVerificationService_Expecter{mock: &_m.Mock}
}

// RegisterEmailService provides a mock function with given fields: host, port, username, password, sender
func (_m *MockVerificationService) RegisterEmailService(host string, port int, username string, password string, sender string) {
	_m.Called(host, port, username, password, sender)
}

// MockVerificationService_RegisterEmailService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEmailService'
type MockVerificationService_RegisterEmailService_Call struct {
	*mock.Call
}

// RegisterEmailService is a helper method to define mock.On call
//   - host string
//   - port int
//   - username string
//   - password string
//   - sender string
func (_e *MockVerificationService_Expecter) RegisterEmailService(host interface{}, port interface{}, username interface{}, password interface{}, sender interface{}) *MockVerificationService_RegisterEmailService_Call {
	return &MockVerificationService_RegisterEmailService_Call{Call: _e.mock.On("RegisterEmailService", host, port, username, password, sender)}
}

func (_c *MockVerificationService_RegisterEmailService_Call) Run(run func(host string, port int, username string, password string, sender string)) *MockVerificationService_RegisterEmailService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockVerificationService_RegisterEmailService_Call) Return() *MockVerificationService_RegisterEmailService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVerificationService_RegisterEmailService_Call) RunAndReturn(run func(string, int, string, string, string)) *MockVerificationService_RegisterEmailService_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSMSService provides a mock function with given fields: smsSender
func (_m *MockVerificationService) RegisterSMSService(smsSender string) {
	_m.Called(smsSender)
}

// MockVerificationService_RegisterSMSService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSMSService'
type MockVerificationService_RegisterSMSService_Call struct {
	*mock.Call
}

// RegisterSMSService is a helper method to define mock.On call
//   - smsSender string
func (_e *MockVerificationService_Expecter) RegisterSMSService(smsSender interface{}) *MockVerificationService_RegisterSMSService_Call {
	return &MockVerificationService_RegisterSMSService_Call{Call: _e.mock.On("RegisterSMSService", smsSender)}
}

func (_c *MockVerificationService_RegisterSMSService_Call) Run(run func(smsSender string)) *MockVerificationService_RegisterSMSService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVerificationService_RegisterSMSService_Call) Return() *MockVerificationService_RegisterSMSService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockVerificationService_RegisterSMSService_Call) RunAndReturn(run func(string)) *MockVerificationService_RegisterSMSService_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmail provides a mock function with given fields: ctx, opt
func (_m *MockVerificationService) SendEmail(ctx context.Context, opt core.Option) error {
	ret := _m.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Option) error); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerificationService_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockVerificationService_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - opt core.Option
func (_e *MockVerificationService_Expecter) SendEmail(ctx interface{}, opt interface{}) *MockVerificationService_SendEmail_Call {
	return &MockVerificationService_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, opt)}
}

func (_c *MockVerificationService_SendEmail_Call) Run(run func(ctx context.Context, opt core.Option)) *MockVerificationService_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Option))
	})
	return _c
}

func (_c *MockVerificationService_SendEmail_Call) Return(_a0 error) *MockVerificationService_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerificationService_SendEmail_Call) RunAndReturn(run func(context.Context, core.Option) error) *MockVerificationService_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendSMS provides a mock function with given fields: ctx, opt
func (_m *MockVerificationService) SendSMS(ctx context.Context, opt core.Option) error {
	ret := _m.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for SendSMS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.Option) error); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerificationService_SendSMS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSMS'
type MockVerificationService_SendSMS_Call struct {
	*mock.Call
}

// SendSMS is a helper method to define mock.On call
//   - ctx context.Context
//   - opt core.Option
func (_e *MockVerificationService_Expecter) SendSMS(ctx interface{}, opt interface{}) *MockVerificationService_SendSMS_Call {
	return &MockVerificationService_SendSMS_Call{Call: _e.mock.On("SendSMS", ctx, opt)}
}

func (_c *MockVerificationService_SendSMS_Call) Run(run func(ctx context.Context, opt core.Option)) *MockVerificationService_SendSMS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.Option))
	})
	return _c
}

func (_c *MockVerificationService_SendSMS_Call) Return(_a0 error) *MockVerificationService_SendSMS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerificationService_SendSMS_Call) RunAndReturn(run func(context.Context, core.Option) error) *MockVerificationService_SendSMS_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: ctx, code
func (_m *MockVerificationService) Verify(ctx context.Context, code string) (*core.User, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.User, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.User); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerificationService_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockVerificationService_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockVerificationService_Expecter) Verify(ctx interface{}, code interface{}) *MockVerificationService_Verify_Call {
	return &MockVerificationService_Verify_Call{Call: _e.mock.On("Verify", ctx, code)}
}

func (_c *MockVerificationService_Verify_Call) Run(run func(ctx context.Context, code string)) *MockVerificationService_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVerificationService_Verify_Call) Return(_a0 *core.User, _a1 error) *MockVerificationService_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerificationService_Verify_Call) RunAndReturn(run func(context.Context, string) (*core.User, error)) *MockVerificationService_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerificationService creates a new instance of MockVerificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerificationService {
	mock := &MockVerificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
