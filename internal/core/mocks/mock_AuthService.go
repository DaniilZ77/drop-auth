// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/MAXXXIMUS-tropical-milkshake/beatflow-auth/internal/core"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, user
func (_m *MockAuthService) Login(ctx context.Context, user core.User) (*string, *string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User) (*string, *string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.User) *string); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.User) *string); ok {
		r1 = rf(ctx, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.User) error); ok {
		r2 = rf(ctx, user)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
func (_e *MockAuthService_Expecter) Login(ctx interface{}, user interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", ctx, user)}
}

func (_c *MockAuthService_Login_Call) Run(run func(ctx context.Context, user core.User)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User))
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(accessToken *string, refreshToken *string, err error) *MockAuthService_Login_Call {
	_c.Call.Return(accessToken, refreshToken, err)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(context.Context, core.User) (*string, *string, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// LoginExternal provides a mock function with given fields: ctx, user, externalUser, provider, isValid
func (_m *MockAuthService) LoginExternal(ctx context.Context, user core.User, externalUser core.ExternalUser, provider core.AuthProvider, isValid bool) (*string, *string, error) {
	ret := _m.Called(ctx, user, externalUser, provider, isValid)

	if len(ret) == 0 {
		panic("no return value specified for LoginExternal")
	}

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, core.User, core.ExternalUser, core.AuthProvider, bool) (*string, *string, error)); ok {
		return rf(ctx, user, externalUser, provider, isValid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.User, core.ExternalUser, core.AuthProvider, bool) *string); ok {
		r0 = rf(ctx, user, externalUser, provider, isValid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.User, core.ExternalUser, core.AuthProvider, bool) *string); ok {
		r1 = rf(ctx, user, externalUser, provider, isValid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, core.User, core.ExternalUser, core.AuthProvider, bool) error); ok {
		r2 = rf(ctx, user, externalUser, provider, isValid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthService_LoginExternal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginExternal'
type MockAuthService_LoginExternal_Call struct {
	*mock.Call
}

// LoginExternal is a helper method to define mock.On call
//   - ctx context.Context
//   - user core.User
//   - externalUser core.ExternalUser
//   - provider core.AuthProvider
//   - isValid bool
func (_e *MockAuthService_Expecter) LoginExternal(ctx interface{}, user interface{}, externalUser interface{}, provider interface{}, isValid interface{}) *MockAuthService_LoginExternal_Call {
	return &MockAuthService_LoginExternal_Call{Call: _e.mock.On("LoginExternal", ctx, user, externalUser, provider, isValid)}
}

func (_c *MockAuthService_LoginExternal_Call) Run(run func(ctx context.Context, user core.User, externalUser core.ExternalUser, provider core.AuthProvider, isValid bool)) *MockAuthService_LoginExternal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.User), args[2].(core.ExternalUser), args[3].(core.AuthProvider), args[4].(bool))
	})
	return _c
}

func (_c *MockAuthService_LoginExternal_Call) Return(accessToken *string, refreshToken *string, err error) *MockAuthService_LoginExternal_Call {
	_c.Call.Return(accessToken, refreshToken, err)
	return _c
}

func (_c *MockAuthService_LoginExternal_Call) RunAndReturn(run func(context.Context, core.User, core.ExternalUser, core.AuthProvider, bool) (*string, *string, error)) *MockAuthService_LoginExternal_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *MockAuthService) RefreshToken(ctx context.Context, refreshToken string) (*string, *string, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *string
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, *string, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *string); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, refreshToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthService_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthService_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockAuthService_Expecter) RefreshToken(ctx interface{}, refreshToken interface{}) *MockAuthService_RefreshToken_Call {
	return &MockAuthService_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshToken)}
}

func (_c *MockAuthService_RefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthService_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_RefreshToken_Call) Return(_a0 *string, _a1 *string, _a2 error) *MockAuthService_RefreshToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthService_RefreshToken_Call) RunAndReturn(run func(context.Context, string) (*string, *string, error)) *MockAuthService_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, code, password
func (_m *MockAuthService) ResetPassword(ctx context.Context, code string, password string) (*core.User, error) {
	ret := _m.Called(ctx, code, password)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*core.User, error)); ok {
		return rf(ctx, code, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *core.User); ok {
		r0 = rf(ctx, code, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockAuthService_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - password string
func (_e *MockAuthService_Expecter) ResetPassword(ctx interface{}, code interface{}, password interface{}) *MockAuthService_ResetPassword_Call {
	return &MockAuthService_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, code, password)}
}

func (_c *MockAuthService_ResetPassword_Call) Run(run func(ctx context.Context, code string, password string)) *MockAuthService_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuthService_ResetPassword_Call) Return(_a0 *core.User, _a1 error) *MockAuthService_ResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_ResetPassword_Call) RunAndReturn(run func(context.Context, string, string) (*core.User, error)) *MockAuthService_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function with given fields: ctx, emailCode, telephoneCode, user, ip
func (_m *MockAuthService) Signup(ctx context.Context, emailCode string, telephoneCode string, user core.User, ip string) (*core.User, error) {
	ret := _m.Called(ctx, emailCode, telephoneCode, user, ip)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 *core.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, core.User, string) (*core.User, error)); ok {
		return rf(ctx, emailCode, telephoneCode, user, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, core.User, string) *core.User); ok {
		r0 = rf(ctx, emailCode, telephoneCode, user, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, core.User, string) error); ok {
		r1 = rf(ctx, emailCode, telephoneCode, user, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type MockAuthService_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - ctx context.Context
//   - emailCode string
//   - telephoneCode string
//   - user core.User
//   - ip string
func (_e *MockAuthService_Expecter) Signup(ctx interface{}, emailCode interface{}, telephoneCode interface{}, user interface{}, ip interface{}) *MockAuthService_Signup_Call {
	return &MockAuthService_Signup_Call{Call: _e.mock.On("Signup", ctx, emailCode, telephoneCode, user, ip)}
}

func (_c *MockAuthService_Signup_Call) Run(run func(ctx context.Context, emailCode string, telephoneCode string, user core.User, ip string)) *MockAuthService_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(core.User), args[4].(string))
	})
	return _c
}

func (_c *MockAuthService_Signup_Call) Return(_a0 *core.User, _a1 error) *MockAuthService_Signup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_Signup_Call) RunAndReturn(run func(context.Context, string, string, core.User, string) (*core.User, error)) *MockAuthService_Signup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
