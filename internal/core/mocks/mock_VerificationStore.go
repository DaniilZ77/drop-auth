// Code generated by mockery v2.43.2. DO NOT EDIT.

package core

import (
	context "context"

	core "github.com/MAXXXIMUS-tropical-milkshake/beatflow-auth/internal/core"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockVerificationStore is an autogenerated mock type for the VerificationStore type
type MockVerificationStore struct {
	mock.Mock
}

type MockVerificationStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerificationStore) EXPECT() *MockVerificationStore_Expecter {
	return &MockVerificationStore_Expecter{mock: &_m.Mock}
}

// DeleteVerificationCode provides a mock function with given fields: ctx, key
func (_m *MockVerificationStore) DeleteVerificationCode(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerificationCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerificationStore_DeleteVerificationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVerificationCode'
type MockVerificationStore_DeleteVerificationCode_Call struct {
	*mock.Call
}

// DeleteVerificationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockVerificationStore_Expecter) DeleteVerificationCode(ctx interface{}, key interface{}) *MockVerificationStore_DeleteVerificationCode_Call {
	return &MockVerificationStore_DeleteVerificationCode_Call{Call: _e.mock.On("DeleteVerificationCode", ctx, key)}
}

func (_c *MockVerificationStore_DeleteVerificationCode_Call) Run(run func(ctx context.Context, key string)) *MockVerificationStore_DeleteVerificationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVerificationStore_DeleteVerificationCode_Call) Return(_a0 error) *MockVerificationStore_DeleteVerificationCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerificationStore_DeleteVerificationCode_Call) RunAndReturn(run func(context.Context, string) error) *MockVerificationStore_DeleteVerificationCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerificationCode provides a mock function with given fields: ctx, key
func (_m *MockVerificationStore) GetVerificationCode(ctx context.Context, key string) (*core.VerificationCode, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetVerificationCode")
	}

	var r0 *core.VerificationCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.VerificationCode, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.VerificationCode); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.VerificationCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVerificationStore_GetVerificationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerificationCode'
type MockVerificationStore_GetVerificationCode_Call struct {
	*mock.Call
}

// GetVerificationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockVerificationStore_Expecter) GetVerificationCode(ctx interface{}, key interface{}) *MockVerificationStore_GetVerificationCode_Call {
	return &MockVerificationStore_GetVerificationCode_Call{Call: _e.mock.On("GetVerificationCode", ctx, key)}
}

func (_c *MockVerificationStore_GetVerificationCode_Call) Run(run func(ctx context.Context, key string)) *MockVerificationStore_GetVerificationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVerificationStore_GetVerificationCode_Call) Return(_a0 *core.VerificationCode, _a1 error) *MockVerificationStore_GetVerificationCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVerificationStore_GetVerificationCode_Call) RunAndReturn(run func(context.Context, string) (*core.VerificationCode, error)) *MockVerificationStore_GetVerificationCode_Call {
	_c.Call.Return(run)
	return _c
}

// SetVerificationCode provides a mock function with given fields: ctx, key, val, expiresIn
func (_m *MockVerificationStore) SetVerificationCode(ctx context.Context, key string, val core.VerificationCode, expiresIn time.Duration) error {
	ret := _m.Called(ctx, key, val, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for SetVerificationCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, core.VerificationCode, time.Duration) error); ok {
		r0 = rf(ctx, key, val, expiresIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVerificationStore_SetVerificationCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVerificationCode'
type MockVerificationStore_SetVerificationCode_Call struct {
	*mock.Call
}

// SetVerificationCode is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - val core.VerificationCode
//   - expiresIn time.Duration
func (_e *MockVerificationStore_Expecter) SetVerificationCode(ctx interface{}, key interface{}, val interface{}, expiresIn interface{}) *MockVerificationStore_SetVerificationCode_Call {
	return &MockVerificationStore_SetVerificationCode_Call{Call: _e.mock.On("SetVerificationCode", ctx, key, val, expiresIn)}
}

func (_c *MockVerificationStore_SetVerificationCode_Call) Run(run func(ctx context.Context, key string, val core.VerificationCode, expiresIn time.Duration)) *MockVerificationStore_SetVerificationCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(core.VerificationCode), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockVerificationStore_SetVerificationCode_Call) Return(_a0 error) *MockVerificationStore_SetVerificationCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVerificationStore_SetVerificationCode_Call) RunAndReturn(run func(context.Context, string, core.VerificationCode, time.Duration) error) *MockVerificationStore_SetVerificationCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerificationStore creates a new instance of MockVerificationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerificationStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerificationStore {
	mock := &MockVerificationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
