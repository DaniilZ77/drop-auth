// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	generated "github.com/MAXXXIMUS-tropical-milkshake/beatflow-auth/internal/db/generated"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserModifier is an autogenerated mock type for the UserModifier type
type UserModifier struct {
	mock.Mock
}

// DeleteAdmin provides a mock function with given fields: ctx, userID
func (_m *UserModifier) DeleteAdmin(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAdmin provides a mock function with given fields: ctx, params
func (_m *UserModifier) SaveAdmin(ctx context.Context, params generated.SaveAdminParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SaveAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.SaveAdminParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, user
func (_m *UserModifier) SaveUser(ctx context.Context, user generated.SaveUserParams) (*uuid.UUID, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.SaveUserParams) (*uuid.UUID, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.SaveUserParams) *uuid.UUID); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.SaveUserParams) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserModifier) UpdateUser(ctx context.Context, user generated.UpdateUserParams) (*generated.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *generated.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.UpdateUserParams) (*generated.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.UpdateUserParams) *generated.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.UpdateUserParams) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserModifier creates a new instance of UserModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserModifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserModifier {
	mock := &UserModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
