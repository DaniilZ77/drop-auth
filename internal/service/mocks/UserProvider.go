// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	generated "github.com/MAXXXIMUS-tropical-milkshake/beatflow-auth/internal/db/generated"
	mock "github.com/stretchr/testify/mock"

	model "github.com/MAXXXIMUS-tropical-milkshake/beatflow-auth/internal/domain/model"

	uuid "github.com/google/uuid"
)

// UserProvider is an autogenerated mock type for the UserProvider type
type UserProvider struct {
	mock.Mock
}

// GetAdmins provides a mock function with given fields: ctx, params
func (_m *UserProvider) GetAdmins(ctx context.Context, params generated.GetAdminsParams) ([]generated.GetAdminsRow, *uint64, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAdmins")
	}

	var r0 []generated.GetAdminsRow
	var r1 *uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.GetAdminsParams) ([]generated.GetAdminsRow, *uint64, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.GetAdminsParams) []generated.GetAdminsRow); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]generated.GetAdminsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.GetAdminsParams) *uint64); ok {
		r1 = rf(ctx, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uint64)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, generated.GetAdminsParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserAdminByID provides a mock function with given fields: ctx, id
func (_m *UserProvider) GetUserAdminByID(ctx context.Context, id uuid.UUID) (*generated.GetUserAdminByIDRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAdminByID")
	}

	var r0 *generated.GetUserAdminByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*generated.GetUserAdminByIDRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *generated.GetUserAdminByIDRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.GetUserAdminByIDRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAdminByUsername provides a mock function with given fields: ctx, username
func (_m *UserProvider) GetUserAdminByUsername(ctx context.Context, username string) (*generated.GetUserAdminByUsernameRow, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAdminByUsername")
	}

	var r0 *generated.GetUserAdminByUsernameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*generated.GetUserAdminByUsernameRow, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *generated.GetUserAdminByUsernameRow); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.GetUserAdminByUsernameRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserProvider) GetUserByID(ctx context.Context, id uuid.UUID) (*generated.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *generated.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*generated.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *generated.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*generated.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, params
func (_m *UserProvider) GetUsers(ctx context.Context, params model.GetUsersParams) ([]generated.User, *uint64, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []generated.User
	var r1 *uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUsersParams) ([]generated.User, *uint64, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUsersParams) []generated.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]generated.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.GetUsersParams) *uint64); ok {
		r1 = rf(ctx, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uint64)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.GetUsersParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserProvider creates a new instance of UserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProvider {
	mock := &UserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
